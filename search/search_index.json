{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"UPDATE!","text":"<p>I have decided to stop developing this knowledge base as I have found a nicer library for static site generation which is Astro rather than MKDocs. I also found myself with problem in writing document for static site generation and is looking forward to building a content management software (CMS) and make sure support to all technical necessity in writing, such as LaTeX, mermaid for diagram, better code block and many more.</p>"},{"location":"cs/standard-algorthm/1-search/","title":"Search","text":""},{"location":"cs/standard-algorthm/2-sort/","title":"Sort","text":""},{"location":"cs/standard-algorthm/2-sort/#selection-sort","title":"Selection Sort","text":"<p>Concept: Find minimum variable of the array and put it in front, repeat the process without the numbers already sorted n - 1 times. \\ Time Complexity: o(n<sup>2</sup>), O(n<sup>2</sup>) \\ Stability: Stable \\ C implementation <pre><code>void Sort(int arr[],int n){\n    //loop n - 1 times\n    for(int i = 0; i &lt; n - 1; ++i){\n        int min_index = i;\n\n        //find minimum element from i onwards\n        for(int j = i + 1; j &lt; n; ++j){\n            if(arr[j] &lt; arr[min_index]){\n                min_index = j;\n            }\n        }\n\n        // Swap minimum variable to the ith position\n        if (min_idx != i) {\n            int temp = arr[i];\n            arr[i] = arr[min_idx];\n            arr[min_idx] = temp;\n        }\n    }\n}\n</code></pre></p>"},{"location":"cs/standard-algorthm/2-sort/#bubble-sort","title":"Bubble Sort","text":"<p>Concept: Pass through the array comparing pairs of adjacent elements, and swapping them if they are  out of order, done n- 1 times or until there are no swaps (whichever comes first). \\ Time Complexity: o(n), O(n<sup>2</sup>) \\ Stability: Stable \\ C Implementation <pre><code>void swap(int* xp, int* yp){\n    int temp = *xp;\n    *xp = *yp;\n    *yp = temp;\n}\nvoid Sort(int arr[],int n){\n    bool swapped;\n    for(int i = 0;i &lt; n - 1; ++i){\n        swapped = false;\n        for (j = 0; j &lt; n - i - 1; j++) {\n            if (arr[j] &gt; arr[j + 1]) {\n                swap(&amp;arr[j], &amp;arr[j + 1]);\n                swapped = true;\n            }\n        }\n        if(!swapped)\n            break;\n    }\n}\n</code></pre></p>"},{"location":"cs/standard-algorthm/2-sort/#insertion-sort","title":"Insertion Sort","text":"<p>Concept: Start with the second element of the array, compare it with all previous(sorted) elements and insert to put it in its correct position. Repeat lenght - 1 times iterating through each element every time \\ Time Complexity: o(n), O(n<sup>2</sup>) \\ Stability: Stable  \\ C Implementation <pre><code>void Sort(int arr[], int n)\n{\n    for (int i = 1; i &lt; n; ++i) {\n        int key = arr[i];\n        int j = i - 1;\n        while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) {\n            arr[j + 1] = arr[j];\n            --j;\n        }\n        arr[j + 1] = key;\n    }\n}\n</code></pre></p>"},{"location":"cs/standard-algorthm/2-sort/#merge-sort","title":"Merge Sort","text":""},{"location":"cs/standard-algorthm/2-sort/#quick-sort","title":"Quick Sort","text":""},{"location":"learning/","title":"Learning","text":""},{"location":"learning/#learning-system","title":"Learning System","text":""},{"location":"physics/","title":"Physic","text":""},{"location":"physics/#page-that-are-finished-or-somewhat-finished","title":"Page that are finished or somewhat finished","text":"<ul> <li>friction</li> <li>force</li> <li>circular motion</li> <li>equilibrium</li> <li>dynamic</li> <li>motion to be completed</li> <li>projectile to be redo</li> <li>work and energy</li> <li>kinetic energy</li> <li>potential energy</li> <li>collision</li> <li>frame of reference</li> <li>momentum</li> <li>center of mass</li> </ul> <p>Tip</p> <p>Sometimes I use (!) which means, I am not sure and will come back to it.</p> <p>All pages are writen in markdown and use mathjax for Latex. Mkdocs is used to convert all the latex and markdown into equivalence hhtml structure.</p>"},{"location":"physics/#planning-to-do","title":"planning to do","text":"<ul> <li>oscillation</li> </ul>"},{"location":"physics/#main-resource","title":"main resource","text":"<ul> <li>Mr Baxter M2 and M3 Revision note book</li> <li>Physic a level textbook is not good so I use Physic Hypertextbook</li> <li>MIT OCW Textbook</li> </ul>"},{"location":"physics/classic/","title":"Newtonian Mechanic","text":"<p>Info</p> <p>This field study:</p> <ul> <li>force</li> <li>motion</li> <li>energy</li> <li>wave</li> </ul> <ul> <li>dynamic: study of motion and force</li> <li>kinematic(case): study of motion without force </li> <li>static(case): study of force without motion \\(a=0 , v=0\\)</li> <li>a system have energy if it can do work</li> <li>work is done when external force cause a change in energy of a system (work-energy theorem)</li> <li>energetic: study of change in form of energy due to phsyical process</li> </ul> <p>conservation law</p> <ul> <li>conservation of linear momentum (clm)</li> <li>conservation of mass-energy (cme)</li> <li>conservation of angualar momentum (cam)</li> </ul>"},{"location":"physics/classic/1-dynamic/","title":"dynamic","text":""},{"location":"physics/classic/1-dynamic/#system-and-forces","title":"system and forces","text":"<p>Info</p> <ul> <li>system and surrounding</li> <li>external vs internal force</li> <li>system and surrounding force</li> </ul> <p>Info</p> <ul> <li>types of force: contact vs non-contact</li> <li>fundamental force: all force in universe can be describe with the fundamental interaction. These forces are all non-contact force</li> <li>fictitious forces: apparent (forces) on mass experience in an accelerating coordinate system as a consequence of trying to keep up with an accelerating environment.</li> <li>restoring force: type of force that cause oscilltory motion</li> </ul> <p>some definition</p> <ul> <li>inertia is a resistance to change (or acceleration)</li> <li>force is an interaction between system, and only external force can cause change of system (acceleration and energy)</li> </ul> <p>n1l \\(\\&gt; (1)\\)</p> <p>a mass's state of motion can't be change (\\(\\forall t \\hspace{12px}v=k \\in \\mathbb{R}\\)) unless acted upon by external net force</p> <p>n2l \\(\\&gt; (2)\\)</p> \\[\\begin{align} F &amp; = \\dot{p} \\\\  &amp; =\\dot{(mv)}  \\\\  &amp; = m\\dot{v} + \\dot{m}v \\\\ \\text{for } m=k: \\quad F &amp; \\equiv ma \\\\ \\end{align}\\] n1l, n2l analogous in other form <p></p> <p>n3l \\(\\&gt; (3)\\)</p> <p>for all interaction between masses, the force:</p> <ul> <li>\\(F_{ba}=-F_{ab}\\&gt;:\\) are equal and opposite (which act on different body)</li> <li>are the same type</li> </ul> <p>Warning</p> <p>acceleration may be different (depending on the inertia of the system)</p>"},{"location":"physics/classic/1-dynamic/#quantity-of-object","title":"quantity of object","text":"<p>// maybe put this somewhere else </p>"},{"location":"physics/classic/1-dynamic/#mass","title":"mass","text":"<ul> <li>quantity of inertia</li> <li>quantity of matter in an object</li> <li>scalar</li> </ul> how is mass found to be the cause inertia? experiment <ol> <li>pick an object to be the standard unit mass</li> <li>push mass with reproducible force (use n3l)</li> <li>find acceleration</li> <li>push an unknown mass with the same force</li> <li>measure new acceleration</li> <li>mass is inversely proportional to acceleration</li> <li>(!) intertia is inversely proportional to acceleration</li> <li>mass is directly proportional to inertia</li> </ol> (!) thought experiment <ol> <li>imagine two masses moving at constant velocity</li> <li>the momentum of heavier mass is greater</li> <li>applying the same force on both mass</li> <li>predict that more time neeeded for the mass with higher momentum to stop</li> </ol>"},{"location":"physics/classic/1-dynamic/#momentum","title":"momentum","text":""},{"location":"physics/classic/1-dynamic/#torque-moment","title":"torque / moment","text":""},{"location":"physics/classic/1-dynamic/#source","title":"source","text":"<ul> <li>https://physics.info/newton-first/</li> </ul>"},{"location":"physics/classic/1-dynamic/2-equilibrium/","title":"equilibrium","text":"<p>Tip</p> \\[\\begin{align}  &amp; \\text{translational equilibrium }\\triangleq (\\Sigma F =0)  \\\\  &amp;\\therefore v =k \\\\ \\\\  &amp; v=0 \\&gt; \\text{ system is static} \\\\  &amp; v\\neq 0  \\text{ system is dynamic} \\end{align}\\] <p>Tip</p> <p>this idea can be extended from translational equilibrium \\(\\Sigma F = 0\\) to rotational/angular equilibrium \\(\\Sigma\\tau=0\\)</p> <p>Warning</p> \\[\\text{equilibrium}\\triangleq \\text{(translational equilibrium)} \\land \\text{(rotational equilibrium)}\\]"},{"location":"physics/classic/1-dynamic/2-equilibrium/#dynamic","title":"dynamic","text":""},{"location":"physics/classic/1-dynamic/2-equilibrium/#static","title":"static","text":"<p>The word equilibrium also has a thermodynamic meaning. Thermodynamics is the branch of physics that treats heat (the thermo part) as another form of energy (the dynamics part). Equilibrium in thermodynamics occurs when the internal energy entering a system is balanced by an equal amount of internal energy exiting the system. Net internal energy in transfer from one place to another is called heat. When a system no longer exchanges heat with its surroundings, it's said to be in thermodynamic equilibrium. The image this kind of equilibrium evokes is nothing like placid picture of forces combining politely to produce rest or unchanging velocity. Thermodynamic equilibrium is active and lively. It's an example of a dynamic equilibrium. I used the article \"an\" because there are others. When the rate of evaporation equals the rate of condensation, that's an example of dynamic equilibrium. When the rate at which nitrogen dissolves into water equals the rate at which it undissolves back into the air, that's another example. Once again, save it for later.</p>"},{"location":"physics/classic/1-dynamic/3-collision/","title":"collision","text":""},{"location":"physics/classic/1-dynamic/3-collision/#collision-type","title":"collision type","text":""},{"location":"physics/classic/1-dynamic/3-collision/#coefficient-of-restitution","title":"coefficient of restitution","text":"Abstract <p>the word restitution meaning giving something back. In this case, we are trying to describe the energy after collision relative to before.</p> <p></p> <p>Note</p> <p>Kinetic energy of a system depend on change in velocity of all the masses.</p> <p>If mass A, B collides, then they must have approach -&gt; collide -&gt; separate. We can set A as the inertial reference frame. \\(v_{a'}, v_{b'}\\) represent the relative velocity. </p> \\[\\begin{align}  &amp; v_{a'} \\triangleq 0 \\quad \\forall t \\quad\\Rightarrow \\quad v_{b'} \\triangleq v_{b} - v_{a} \\\\  &amp; v_{b'} \\text{ is the relative velocity of b approaching a}  \\\\  &amp;  e \\triangleq \\frac{-v_{b'}}{u_{b'}} \\equiv \\frac{\\text{separating speed}}{\\text{approaching speed}}  \\\\  &amp; \\ \\ \\equiv -\\frac{v_{b}-v_{a}}{u_{b}-u_{a}} \\end{align}\\] <p>Tip</p> <p>One of \\(v_{a}\\) or \\(v_{b}\\) has to be negative because, initially, they must approach each other. we set the direction of \\(v_{a} \\triangleq -\\) so that \\(v_{b} \\triangleq +\\) , hence \\(v_{b'}=v_{b}-v_{a}\\)</p> what is e (cor)? <p>\\(e\\) is a ratio where multiplying it to the negative of the approaching speed gives the speed of the separation. It quantifies the elasticity of a collision and give insight to energy conservation of the collision.</p> <p>Since, \\(v_{b'}\\) is the only changing velocity in this reference frame </p> \\[\\begin{align}  &amp; \\Delta K = \\frac{1}{2}m_{b}(v_{b'}^{2}-u_{b'}^{2}) \\\\  &amp;  K_{i} = \\frac{1}{2}m_{b}u_{b'}^{2} = \\text{total }E_{system} \\end{align}\\] \\[\\begin{align} \\text{if} \\quad &amp;  v_{b'} = -u_{b'} &amp;  e = 1 \\quad\\Rightarrow \\quad &amp; \\Delta K = 0  \\quad  &amp;   \\text{elastic} \\\\  &amp; 0 &lt; |-v_{b'}| &lt; u_{b'}  &amp;  e\\in(0,1) \\quad \\Rightarrow \\quad &amp; \\Delta K &lt; 0  \\quad  &amp; \\text{inelastic} \\\\  \\quad &amp;  v_{b'} = 0  &amp; e= 0  \\quad \\Rightarrow \\quad  &amp; \\Delta K = -K_{i} \\quad &amp; \\text{perfectly inelastic}  \\end{align}\\] a superelastic collision?! <p>It's fictional type of collision which release potential energy on impact. No need to </p> interpreting \\(\\Delta K = -K_{i}\\) <p>kinetic energy has been reduce by \\(K_{i}\\) which is the total energy that the system has originally, therefore, it must have stopped moving \\(v_{a}=v_{b}=0\\).</p>"},{"location":"physics/classic/1-dynamic/4-deformation/","title":"deformation","text":""},{"location":"physics/classic/1-dynamic/99-technique/","title":"mechanic techniques","text":""},{"location":"physics/classic/1-dynamic/forces/","title":"forces","text":""},{"location":"physics/classic/1-dynamic/forces/#contact-force-solid-solid","title":"contact force (solid-solid)","text":"<ul> <li>tension-compression \\(\\mathbf{T}\\)</li> <li>push-pull applied force \\(\\mathbf{F_{i}}\\) or \\(\\mathbf{F_{xy}}\\) (force \"on\" x \"by\" y)<ul> <li>if it's a driving force \\(\\mathcal{D}\\)</li> </ul> </li> <li>surface reaction \\(\\mathbf{\\vec{R}}\\) <ul> <li>\\(\\parallel \\text{ friction } f\\)</li> <li>\\(\\perp \\text{ normal }\\mathbf{N}\\)</li> </ul> </li> </ul>"},{"location":"physics/classic/1-dynamic/forces/#contact-force-solid-fluid","title":"contact force (solid-fluid)","text":"<ul> <li>drag \\(\\mathbf{D}\\)</li> <li>lift \\(\\mathbf{L}\\)</li> <li>thrust \\(\\mathbf{P}\\)</li> <li>upthrust \\(\\mathbf{U}\\) (or buoyancy)</li> </ul>"},{"location":"physics/classic/1-dynamic/forces/#non-contact-force-fields-related-force","title":"non-contact force (fields related force)","text":"<ul> <li>electrostatic force \\(\\mathbf{E}\\)</li> <li>magnetic force \\(\\mathbf{B}\\)</li> <li>gravitational force (or weight \\(\\mathbf{W}\\)):</li> <li>strong nuclear interaction</li> <li>weak nuclear interaction</li> </ul> what is a field? <p>a region of space (or area but 3D) where something experience a force.</p> <p>\"an area of effect ability that only affect certain characters\" - me</p>"},{"location":"physics/classic/1-dynamic/forces/#fictitious-forces","title":"fictitious forces","text":"<ul> <li>centrifugal force</li> <li>coriolis force</li> <li>\"G force\": Not really a force (or even a fictitious force) but rather an apparent gravity-like sensation experienced by objects in an accelerating coordinate system.</li> </ul>"},{"location":"physics/classic/1-dynamic/forces/#effect-of-force-on-translational-motion","title":"Effect of force on translational motion","text":"<ul> <li>\\(\\text{n2l}:\\)result in net change acceleration \\(F=ma + \\dot{m}v\\)</li> <li>in circular motion<ul> <li>centripedal force \\(\\mathbf{F_{r}}\\) (direction of radius)</li> <li>tangetiail force \\(\\mathbf{F_{t}}\\)</li> </ul> </li> <li>Generally \\(\\Sigma \\vec{F} = \\begin{pmatrix}\\Sigma F_{x} \\\\  \\Sigma F_{y}\\end{pmatrix}\\)</li> </ul> <p>what about the effect of force on rotational motion?</p> <p>this idea is analogous by using \\(\\tau\\) and \\(\\alpha\\) instead of \\(F\\) and \\(a\\) since they are define with similar DE.</p>"},{"location":"physics/classic/1-dynamic/forces/1-friction/","title":"friction","text":"<p>Tip</p> <ul> <li>friction are the tangential component of the reaction force \\(\\vec{R}\\)</li> <li>two types of friction are experience by a mass (acted by a driving force) depending on their motion (static or kinetic). \\(f(\\mathcal{D},v)\\) act at opposite direction to the driving force.</li> </ul> \\[\\begin{align}  &amp; \\text{consider } (\\mathcal{D},v) \\text{ where } \\mathcal{D},v,f \\text{ are} \\parallel \\text{and } f \\propto -\\mathcal{D} \\\\  &amp; (0,0): \\quad f= 0 \\\\  &amp; (n,0): \\quad 0&lt;f_{s}&lt;f_{max} \\\\  &amp; (n,n): \\quad f_{k}&lt;f_{max} \\end{align}\\] <p>For all of these cases \\(N=k\\) (does not depend on \\(\\mathcal{D} \\text{ or }v\\))</p> <p>Tip</p> <ul> <li>\\(\\mu :\\) coefficient of friction between two specific surfaces</li> <li>\\(f_{max}=\\mu_{s}N\\) </li> <li>\\(f_{k}=\\mu_{k}N\\)</li> <li>\\(f_{s}\\leq f_{max}\\)</li> <li>\\(f_{k}&lt;f_{max}\\)</li> </ul> what does \\(\\mu\\) depend on? <ul> <li>the property of two specific surfaces<ul> <li>for futher research...</li> <li>...</li> </ul> </li> </ul> <p>misc from the website</p> <ul> <li>Recently it has been shown that the lubricant properties of graphite disappear under ultra high vacuum, and hence that molecules of gases, such as oxygen and nitrogen, most probably act as a kind of molecular grease to help the sheets slide past each other.</li> <li>Roughness is a minor factor affecting friction. Friction is often higher between smooth surfaces. Insects can walk on windows.</li> <li>If friction is independent of surface roughness, why do tires have tread? Tire tread sheds water.</li> <li>Teflon has such a low coefficient of friction that it often peels off of pots and pans. (Use wooden or plastic utensils.) How do you get it to stick? Dreadlocks analogy: Teflon is a polymer, individual strands of hair are slippery, but strands can tangle to the point where they can't be separated.</li> <li>Humans have little body hair. Why are certain areas still densely covered with hair? Evolutionary advantages. Describe them!</li> <li>Dynamic friction even exist on the galactic scale. The gravitational tug of passing planets is much the same as the electrostatic forces between passing atoms. The coherent motion of groups of planets will eventually degrade into the random motion of individual planets.</li> </ul>"},{"location":"physics/classic/1-dynamic/forces/2-drag/","title":"drag","text":""},{"location":"physics/classic/1-dynamic/forces/3-push-pull/","title":"tensile and compressive","text":""},{"location":"physics/classic/1-dynamic/motion/","title":"motion","text":"type of motion <ul> <li>translational motion (linear)</li> <li>rotational motion (angular)</li> <li>oscillatory motion (could be linear or angular)</li> <li>random motion (chaos theory, quantum theory)</li> </ul>"},{"location":"physics/classic/1-dynamic/motion/#translational-motion","title":"translational motion","text":""},{"location":"physics/classic/1-dynamic/motion/#rotational-motion","title":"rotational motion","text":"<p>Most of rotational motion is an analouge of translational motion onto angular values. So \\(d \\ sv_{0}vat \\ F \\ m p \\mapsto r \\ \\theta \\omega_{0} \\omega \\alpha t \\  \\tau \\ I L\\) respectively.</p> <p>Tip</p> <p>Rotational motion is periodic(!link to page...) \\(\\theta\\equiv\\theta \\pm(2\\pi)k\\)</p> <p></p> <p>connection between rotation and translation</p> \\[\\begin{align}  &amp; \\text{arc length} = \\theta r \\\\  &amp; s = r\\hat{r} \\qquad \\text{point in a circle}\\\\  &amp; v =  \\omega r \\\\  &amp; \\vec{a} = -\\omega^{2}r\\hat{r} + \\alpha r\\hat{t} \\\\    &amp; \\tau = F \\times s \\\\ \\text{coordinate system}: \\quad &amp; \\vec{s} = \\langle x, y, z \\rangle  \\\\  &amp; \\ \\ = r\\langle \\cos \\theta,\\sin \\theta,\\dots?\\rangle \\text{TBC when learn more} \\\\  &amp; r^{2} =x^{2} + y^{2} +z^{2} +\\dots  \\\\  &amp; \\theta = \\pm\\tan ^{-1}(y / x) \\qquad \\theta \\in \\left( -\\frac{\\pi}{2}, \\frac{\\pi}{2}\\right) \\end{align}\\] <ul> <li>all one dimensional motion of rotational motion are analouge to translation motion, as it is define in a similar way by ODE. Even work, power, potential energy and kinetic energy \\(K =\\frac{1}{2}I\\omega^{2}\\)</li> </ul> <p></p>"},{"location":"physics/classic/1-dynamic/motion/#rolling","title":"rolling","text":""},{"location":"physics/classic/1-dynamic/motion/#special-type-of-motion","title":"special type of motion","text":"<ul> <li>projectile (parabola: 2D linear)</li> <li>circular motion (Circle: 2D oscillatory)</li> <li>SHM (oscillatory)</li> </ul> <p>symmetry</p> <p>\"How we view the world does not change distance and displacement. A symmetric operation does not change the input. Quantities that are not affected by a change are said to show a symmetry.</p> <ul> <li>The location of the observer does not matter so orgin can be placed anywhere \\(O \\ (0,0)\\). Distance and displacement are not affected by a translation of the origin. Space is homogeneous.</li> <li>the orientation of the axes is irrelevant, BUT \\(\\text{xyz-axis must always be } \\perp\\). Distance and displacement are not affected by a rotation of the axes. All directions are equivalent. Space is isotropic.</li> <li>the chirality or handedness of the coordinate system is also irrelevant. \\(\\text{x-axis } \\rightarrow \\text{ y-axis } \\uparrow\\). choosing \\(\\text{z-axis}\\) in or out of the page create a right-hand or left-hand coordinate system. The two possible coordinate systems are like hands because they are mirror images of one another.</li> </ul> <p>Distance and displacement are not affected by a reflection of the coordinate system. This is not true for all physical quantities, however. The ones that don't work the same when viewed in a mirror are called pseudovectors (e.g. torque, angular momentum or spin, and magnetic field).</p> <p>The direction of a pseudovector is always related to a hand rule of some sort (like the one used in vector multiplication). But as we have just discussed and as everyone knows, right hands become left hands and left hands become right hands when viewed in a mirror. Wrong hand means wrong direction. Space appears to know the difference between left and right for some quantities.\"</p>"},{"location":"physics/classic/1-dynamic/motion/#not-organise","title":"not organise","text":""},{"location":"physics/classic/1-dynamic/motion/#1d-linear-motion","title":"1D linear motion","text":"<p>convention</p> <p>\\(\\to\\) and \\(\\uparrow\\) are positive </p>"},{"location":"physics/classic/1-dynamic/motion/#no-acceleration","title":"no acceleration","text":"<p>Note</p> <p>\\(s \\triangleq vt\\)</p>"},{"location":"physics/classic/1-dynamic/motion/#const-acceleration","title":"const acceleration","text":"<p>derive suvat equation</p> \\[ \\begin{align} \\frac{dv}{dt} &amp;\\triangleq a  \\\\ v &amp;= \\int adt \\\\ v &amp;= at + u \\quad (0,u) \\\\ \\end{align} \\] <p>Note</p> <p>\\(v = u + at \\quad (1)\\)</p> \\[ \\begin{align} \\frac{ds}{dt} &amp;\\triangleq v \\\\ s &amp;= \\int u + at dt \\\\ s &amp;= ut + \\frac{1}{2}at^{2} + s_{i} \\quad (0,s_{i})\\\\ \\end{align} \\] <p>Note</p> <p>\\(s = s_i + ut + \\frac{1}{2}at^2 \\quad (2)\\)</p> \\[ \\begin{align} (1) \\Rightarrow s &amp;= s_i + (v-at)t + \\frac{1}{2}at^{2} \\\\ s &amp;= s_i + vt - \\frac{1}{2}at^{2} \\end{align} \\] <p>Note</p> <p>\\(s = s_i + vt - \\frac{1}{2}at^2 \\quad (2.1)\\)</p> \\[ \\begin{align}  &amp; (1) \\quad t = \\frac{v-u}{a} \\\\ \\\\  &amp; (2) \\quad s = s_{i} + u\\left( \\frac{v-u}{a} \\right) + \\frac{1}{2}a \\left( \\frac{v-u}{a} \\right)^{2} \\\\ \\\\ \\end{align} \\] \\[ \\begin{align}  \\Rightarrow \\quad &amp; 2a(s - s_{i}) = 2u(v-u) + (v-u)^{2} \\\\  &amp; 2a \\Delta s = - u^{2} + v^{2}\\\\ \\\\ &amp; v^{2} = u^{2} + 2a\\Delta{s} \\end{align} \\] <p>Note</p> <p>\\(v^{2} = u^{2} + 2a\\Delta{s} \\quad (3)\\)</p> <p>Note</p> <p>\\(s = (\\frac{u+v}{2})t \\quad (4)\\) trapezium area on a \\(v=u + at\\) graph</p>"},{"location":"physics/classic/1-dynamic/motion/#var-acceleration","title":"var acceleration","text":"<p>use \\(\\int ,  \\frac{d}{dt}\\) to find the equation of \\(v, s, a\\) when given one of them and sub in the right \\(t\\)</p>"},{"location":"physics/classic/1-dynamic/motion/#1d-rotational-motion","title":"1D rotational motion","text":"<p>convention</p> <p>\\(\\curvearrowleft\\) is positive</p> <p>frequency and period (beware unit)</p> \\[f  \\triangleq \\frac{1}{T} \\quad \\text{complete \"something\" per second}\\] <ul> <li>rps, fps, cps ... or Hz </li> <li>\\(1 \\mathrm{\\ rev} = 2\\pi \\ \\mathrm{rad}\\)</li> </ul> <p>Tip</p> <p>use the boundary condition \\((t, \\theta) = (T, 2\\pi)\\) or \\((f, \\frac{1}{2\\pi})\\)</p>"},{"location":"physics/classic/1-dynamic/motion/#no-acceleration_1","title":"no acceleration","text":"<p>Note</p> <p>\\(\\theta \\triangleq \\omega t\\)</p> <p>Note</p> <ul> <li>\\(\\omega = \\frac{2\\pi}{T}\\)</li> <li>\\(\\omega = 2\\pi f\\)</li> </ul>"},{"location":"physics/classic/1-dynamic/motion/#const-acceleration_1","title":"const acceleration","text":"<p>\\(\\theta \\omega_{i} \\omega \\alpha t\\) is the \\(suvat\\) equation for angular quantity. Deriving them follow the same pattern.</p> <ul> <li>\\(\\frac{d\\theta}{dt}\\triangleq\\omega\\)</li> <li>\\(\\frac{d\\omega}{dt} \\triangleq \\alpha\\)\\(\\frac{d\\theta}{dt}\\triangleq\\omega\\)</li> <li>\\(\\frac{d\\omega}{dt} \\triangleq \\alpha\\)</li> </ul> <p>Note</p> <ul> <li>\\(\\omega = \\omega_{i} + \\alpha t \\quad (1)\\)</li> <li>\\(\\theta = \\theta_i + \\omega_{i}t + \\frac{1}{2}\\alpha t^2 \\quad (2)\\)</li> <li>\\(s = s_i + vt - \\frac{1}{2}at^2 \\quad (2.1)\\)</li> <li>\\(\\omega^{2} = \\omega_{i}^{2} + 2\\alpha\\Delta{\\theta} \\quad (3)\\)</li> <li>\\(s = (\\frac{u+v}{2})t \\quad (4)\\)</li> </ul>"},{"location":"physics/classic/1-dynamic/motion/#var-acceleration_1","title":"var acceleration","text":"<p>use \\(\\int ,  \\frac{d}{dt}\\) to find the equation of \\(\\theta, \\omega, \\alpha\\) when given one of them and sub in the right \\(t\\)</p>"},{"location":"physics/classic/1-dynamic/motion/#2d-motion-or-3d-motion","title":"2D motion or 3D motion","text":"<p>Note</p> <ul> <li>two/three \\(\\perp\\) linear 1D motions =&gt; 2D/3D motion</li> <li>one/two \\(\\perp\\) rotational 1D motion =&gt; 2D/3D motion</li> </ul>"},{"location":"physics/classic/1-dynamic/motion/1-projectile/","title":"projectile","text":"<p>For projectile:</p> <ul> <li>\\(x:\\) no acceleration</li> <li>\\(y:\\) const acceleration \\(g\\)</li> </ul>"},{"location":"physics/classic/1-dynamic/motion/1-projectile/#equation-of-projectile","title":"equation of projectile","text":"\\[ \\begin{align} &amp; x = u_{x}t \\\\ \\\\ &amp; t = \\frac{x}{u_{x}} \\qquad (1) \\\\ \\\\ y &amp;  = u_{y}t + \\frac{1}{2}a_{y}t^{2} \\\\  &amp; = \\frac{u_{y}x}{u_{x}} + \\frac{a_{y}x^{2}}{2u_{x}^{2}} \\\\  &amp; = \\frac{a_{y}}{2u_{x}^{2}}x^{2} + \\frac{u_{y}}{u_{x}}x  \\\\ \\\\ y &amp; = x \\left( \\frac{a_{y}}{2u_{x}^{2}}x + \\frac{u_{y}}{u_{x}}  \\right) \\qquad (2) \\end{align}  \\] <p>Note</p> <p>const \\(a_{y}, \\vec{u}, \\  \\theta\\) =&gt; a parabola</p> <p></p> \\[ \\vec{s}= \\begin{pmatrix} u_{x}t \\\\ u_{y}t + \\frac{1}{2}a_{y}t^{2} \\end{pmatrix} \\] \\[ \\vec{v} = \\begin{pmatrix} u_{x} \\\\ u_{y} + a_{y}t \\end{pmatrix} \\] \\[ \\vec{a} = \\begin{pmatrix} 0 \\\\ a_{y} \\end{pmatrix} \\] <p>Tip</p> <p>to \\(\\int / \\frac{d}{dt}\\) a vector, perform the operation on all components of the vector individually. The \\(+ \\vec{c}\\) can also be found by using boundary condition \\((\\text{time}, \\overrightarrow{\\text{quantity}})\\)</p> <p>where</p> \\[\\vec{u}= \\begin{pmatrix} u\\cos \\theta \\\\ u\\sin \\theta \\end{pmatrix}\\] <p>finding \\(\\theta\\) at any \\(t\\)</p> \\[\\tan\\theta = \\frac{u_{y}}{u_{x}}\\] <p>max height (\\(\\text{y-axis}\\)) $$ \\begin{align} \\  &amp; \\overbrace{u+at}^v = 0 \\ \\  &amp; t  = -\\frac{u}{a} \\ \\end{align} $$</p> <p>important points</p> <ul> <li>time to max height: \\(t = -\\frac{u_{y}}{a_{y}}\\) </li> <li>max height position: \\(\\vec{s}\\left( -\\frac{u_{y}}{a_{y}} \\right)\\)</li> <li>range: \\(x\\left( -\\frac{2u_{y}}{a_y} \\right)\\)</li> </ul>"},{"location":"physics/classic/1-dynamic/motion/1-projectile/#multiple-bounce","title":"multiple bounce","text":"<p>requires collision</p>"},{"location":"physics/classic/1-dynamic/motion/2-circular/","title":"circular motion","text":""},{"location":"physics/classic/1-dynamic/motion/2-circular/#kinematic","title":"kinematic","text":"<p>preliminary: rotational motion (angular motion)</p> <ul> <li>\\(\\frac{d\\theta}{dt}\\triangleq\\omega\\) which is angular velocity here not angular frequency</li> <li>\\(\\frac{d\\omega}{dt} \\triangleq \\alpha\\)</li> </ul> <p>For a general cirucular motion, assume \\(O\\) at centre. Consider \\(\\hat{r}(\\theta)\\) (radius) and \\(\\hat{t}(\\theta)\\) (tangent) as the rotation of the xy plane in which we will work on. (MAY DRAW DIAGRAM TO SHOW THE r hat and t hat)</p> \\[\\begin{align}  &amp; \\hat{r}\\triangleq\\begin{pmatrix}\\cos \\theta \\\\ \\sin \\theta\\end{pmatrix} \\&gt; \\quad \\hat{t}\\triangleq \\begin{pmatrix}-\\sin \\theta \\\\ \\cos \\theta \\end{pmatrix} \\\\ \\\\ \\text{notice}:\\quad &amp; \\dot{\\hat{r}} = \\omega\\overbrace {\\begin{pmatrix}-\\sin \\theta \\\\ \\cos \\theta \\end{pmatrix}}^{\\hat{t}} \\quad \\dot{\\hat{t}}=\\omega\\overbrace{\\begin{pmatrix}-\\cos \\theta \\\\ -\\sin \\theta \\end{pmatrix}}^{-\\hat{r}}\\\\ \\\\ \\Rightarrow \\quad &amp; \\vec{s}  \\triangleq r\\hat{r} \\\\  &amp; \\vec{v} =\\omega r \\hat{t} \\\\  &amp; \\vec{a}= -\\omega^{2}r\\hat{r} +\\alpha r\\hat{t} \\\\ \\\\ \\therefore \\quad  &amp; s =r \\quad v=\\omega r \\quad a_{r} = \\omega^{2}r \\quad a_{t} = \\alpha r \\end{align}\\] <p>two case of circular motion</p> <ul> <li>uniform</li> <li>non-uniform </li> </ul> <p>we have discovered that \\(\\alpha\\) determine the \\(a_{t}\\) and can be use to observe the two cases of circular motion:</p> \\[\\begin{align}  &amp; \\alpha = 0 , \\ a_{t}=0 &amp; \\Rightarrow   &amp; \\quad  v = k   &amp; \\quad \\text{uniform}\\\\  &amp; \\alpha = k , \\ a_{t}=k &amp; \\Rightarrow  &amp; \\quad  v = u + (\\alpha r)t &amp;  \\quad  \\text{non-uniform} \\\\  &amp; \\text{otherwise} &amp; \\Rightarrow  &amp; \\quad v = v_{i} + \\int (\\alpha r) \\ dt  &amp; \\quad \\text{non-uniform} \\end{align}\\]"},{"location":"physics/classic/1-dynamic/motion/2-circular/#dynamic","title":"dynamic","text":"<p>by \\(\\text{n2l}\\) multiplying mass of the mass in motion on both sides:</p> <ul> <li>\\(F_{r} = mw^{2}r = \\frac{mv^{2}}{r}\\)</li> <li>\\(F_{t}=m\\alpha r\\)</li> </ul>"},{"location":"physics/classic/1-dynamic/motion/3-oscillation/","title":"oscillation","text":"<ul> <li>oscillation: back and forth movement 2</li> <li>phase diff in context of oscillation  2</li> </ul>"},{"location":"physics/classic/1-dynamic/motion/3-oscillation/#shm","title":"SHM","text":"<p>Note</p> <p>SHM is a 1D projection of motion in a circular motion, either the x/y</p> <ul> <li>KE &lt;-&gt; PE</li> <li>resistive force -&gt; damping</li> <li>light, critical, heavy damping &amp; s-t graphs</li> </ul>"},{"location":"physics/classic/1-dynamic/motion/3-oscillation/#energy","title":"energy","text":"<ul> <li>resonance: f of forced oscillation = natural f -&gt; vibration with \\(A_{max}\\) </li> </ul>"},{"location":"physics/classic/1-dynamic/motion/4-frame-of-reference/","title":"newtononian relativity","text":"<p>absolute linear motion at a constant velocity cannot be detected, nor can absolute rest. All motion is relative to a frame of reference. It is not possible to distinguish motion with a constant velocity from rest. All constant velocity frames of reference are equivalent (including frames of reference that appear to be at rest \u2014 after all, a prolonged state of rest is motion with a constant speed of zero).</p>"},{"location":"physics/classic/1-dynamic/motion/5-orbit/","title":"planet orbit","text":""},{"location":"physics/classic/1-dynamic/motion/5-orbit/#escaping-velocity","title":"escaping velocity","text":""},{"location":"physics/classic/1-dynamic/motion/5-orbit/#close-orbit","title":"close orbit","text":""},{"location":"physics/classic/1-dynamic/motion/5-orbit/#open-orbit","title":"open orbit","text":""},{"location":"physics/classic/1-dynamic/motion/5-orbit/#unusual-orbits","title":"unusual orbits","text":"<p>Slingshot effect, translunar insertion, co-orbital moons</p>"},{"location":"physics/classic/1-dynamic/motion/5-orbit/#hubble-constant","title":"hubble constant","text":""},{"location":"physics/classic/1-dynamic/quantity-of-object/","title":"quantity of object (or mass)","text":""},{"location":"physics/classic/1-dynamic/quantity-of-object/1-momentum/","title":"momentum","text":"<p>Tip</p> <p>momentum is a a resistance to stopping</p> \\[\\begin{align} p  &amp; \\triangleq mv \\\\   J  &amp;  \\triangleq F\\Delta t \\quad \\dot{p} \\triangleq F_{\\text{on mass}} \\\\ \\Delta p  &amp;  = \\int_{t_{0}}^{t_{1}} Fdt \\\\  &amp; = J \\end{align}\\] <p>impulse-momentum theorem</p> <p>\\(J = \\Delta p\\), impulse cause a change in momentum... impulse is define as the effect of a force acting over a specific time interval.</p>"},{"location":"physics/classic/1-dynamic/quantity-of-object/1-momentum/#conservation-of-momentum","title":"conservation of momentum","text":"\\[\\begin{align}    &amp; \\text{Let momentum of A, B be p, q (respectively)}\\\\   &amp; p_{a}\\triangleq p \\quad p_{b} \\triangleq q\\\\ \\\\ \\text{n3l}: \\quad &amp;  F_{ab}   = -F_{ba} \\\\   &amp; F_{ab}\\Delta t = - F_{ba}\\Delta t &amp;  \\\\  &amp; I_{ab} = - I_{ba} \\\\ \\Rightarrow \\quad &amp; \\Delta p_{a} \\equiv -\\Delta p_{b} \\\\ \\Rightarrow \\quad &amp; \\Delta p + \\Delta q \\equiv 0 \\\\  &amp; (p_{f} -p_{i})+(q_{f}- q_{i})=0 \\\\ \\Rightarrow \\quad  &amp; p_{i} + q_{i} \\equiv p_{f} + q_{f} \\quad \\text{for a closed system} \\end{align}\\] <p>clm</p> <p>In a closed system \\(\\Sigma \\Delta p\\equiv0\\) or \\(\\Sigma p_{i} \\equiv \\Sigma p_{f}\\)</p>"},{"location":"physics/classic/1-dynamic/quantity-of-object/1-momentum/#changing-mass-problem","title":"changing mass problem","text":"<ul> <li>rocket</li> </ul>"},{"location":"physics/classic/1-dynamic/quantity-of-object/2-centre-of-mass/","title":"centre of mass","text":""},{"location":"physics/classic/1-dynamic/quantity-of-object/2-centre-of-mass/#calculation","title":"calculation","text":"<p>Discrete:\\(s =\\frac{\\Sigma m_{i}r_{i}}{\\Sigma m_{i}}\\) Continuous:\\(s = \\frac{1}{m}\\iiint s \\rho dV\\) Continuous and uniform:\\(s =\\frac{1}{V}\\iiint sdV\\)</p>"},{"location":"physics/classic/1-dynamic/quantity-of-object/2-centre-of-mass/#stability","title":"stability","text":""},{"location":"physics/classic/1-dynamic/quantity-of-object/3-elasticity/","title":"elasticity","text":""},{"location":"physics/classic/1-dynamic/work-and-energy/","title":"work","text":"<p>Info</p> <ul> <li>external\u00a0work: when system excert a force to its surrounding causing a displacement (when we say something doing work, we generally means external work)</li> <li>internal work: when part of system excert a force to another part of system, causing a displacement</li> <li>energy is...</li> <li>abstract and cannot always be perceived</li> <li>given meaning through calculation</li> <li>a central concept in science</li> </ul> <p>When work is done on a mass, it changes the state of energy of that system. We have define force as the only interaction that could change the motion of object. If we apply force to the surrounding and cause masses to displace, then work must have been done to the surrounding.</p> <p>Info</p> <p>A force can only affect motion in the same direction (sometimes we need to break down forces into two perpendicular components, rotating the xy-axis).</p> <p>veritcal force can only affect vertical motion and horizontal force can only affect horizontal motion. </p> <p>Example</p> <p>a mass moving right but has a force acting upward means no work is done (system is still in dynamic equilibrium).</p> <p>based from the observation:</p> \\[\\begin{align}  \\text{when F and s are on the same line}:  \\quad &amp;  \\mathcal{W} \\triangleq Fs \\quad  \\\\ \\text{when F and s depend on time}: \\quad  &amp; \\mathcal{W} \\triangleq \\int \\vec{F} \\cdot \\vec{ds} \\quad \\end{align}\\]"},{"location":"physics/classic/1-dynamic/work-and-energy/#work-energy-theorem","title":"work-energy theorem","text":"<p>Tip</p> <ul> <li>Work causes a change in energy</li> <li>Work can shifts energy from one system to another or change their form</li> </ul> \\[\\begin{align} \\text{since }   \\quad  &amp; \\mathcal{W} \\triangleq \\Delta E \\\\  \\\\ \\text{if}:\\quad &amp; \\mathcal{W}&lt;0 \\quad \\text{work is done by the system/system lose energy} \\\\ \\text{else if}: \\quad  &amp; \\mathcal{W} &gt; 0 \\quad \\text{work is done on the system/system gain energy} \\\\ \\text{otherwise}: \\quad &amp;  \\mathcal{W}= 0 \\quad \\text{no work is done} \\end{align}\\] <p>cme (4)</p> <p>\"The law of conservation of energy cannot be derived. Energy is not concrete; it is not a material substance; it is given meaning through the calculation of numbers. A true historical discussion of the law of conservation of energy is best left to the chapters in this book devoted to thermodynamics. The 19<sup>th</sup> century law of conservation of energy of Mayer and von Helmholtz (and Clausius, Carnot, Rumford, Kelvin, and maybe some more). For now, just take it as a really good idea.\"</p> <p>Tip</p> \\[P \\triangleq \\dot{\\mathcal{W}}\\] \\[\\begin{align} P &amp;  \\triangleq \\frac{d\\mathcal{W}}{dt} \\\\  &amp; =\\frac{d}{dt}\\int F \\cdot ds \\\\  &amp; = \\frac{d}{dt} \\int F \\cdot \\frac{ds}{dt} dt \\\\  &amp; = F \\cdot v \\end{align}\\]"},{"location":"physics/classic/1-dynamic/work-and-energy/#machine","title":"machine","text":"<p>Note</p> <p>Machines are devices that takes in Force (effort) and convert this force to Force (load/output) somehow and somewhere</p> \\[\\begin{align} \\text{effort: } \\quad\\mathcal{W_{in}} &amp;  = F\\cdot s \\quad\\text{on machine}\\\\  \\text{output:} \\quad \\mathcal{W_{out}} &amp; = F \\cdot s \\quad \\text{by machine}\\\\ \\\\ \\text{Ideally (cme)}:\\quad \\mathcal{W_{in}} &amp; = \\mathcal{W_{out}}  \\\\     \\text{real}: \\quad \\mathcal{W_{in}} &amp;  &gt; \\mathcal{W_{out}} \\\\ \\text{so efficiency}: \\quad \\eta  &amp; =\\frac{\\mathcal{W_{out}}}{\\mathcal{W_{in}}} = \\frac{Fs_{load}}{Fs_{effort}}\\\\  &amp; = \\frac{P_{out}}{P_{in}} = \\frac{Fv_{load}}{Fv_{effort}} \\\\ \\end{align}\\]"},{"location":"physics/classic/1-dynamic/work-and-energy/kinetic-energy/","title":"kinetic energy","text":"Abstract"},{"location":"physics/classic/1-dynamic/work-and-energy/kinetic-energy/#kinetic","title":"kinetic","text":"<p>this is not looking good...</p> \\[\\begin{align} \\\\ \\Delta K  &amp; = W \\\\  &amp; = \\int_{C} \\vec{F} \\cdot d\\vec{s} \\\\   &amp; = \\int_{C}\\left( m \\dot{\\vec{v}} + \\vec{v}\\dot{m} \\right)\\cdot \\vec{v}dt\\\\   &amp; = \\int_{C}v^{2}\\dot{m} dt  +\\int_{C} m(\\dot{\\vec{s}}\\cdot  \\ddot{\\vec{s}})dt  \\\\  &amp; = \\text{?}  \\end{align}\\] <p>this is ok</p> <p>For \\(a=k\\)</p> \\[\\begin{align}  2as &amp;  = v^{2} - u^{2} \\\\  \\text{n2l}: \\quad Fs  &amp; = \\frac{1}{2}m(v^{2} - u^{2}) \\\\   W  &amp; = \\frac{1}{2}mv^2-\\frac{1}{2}m u^{2} \\\\     &amp; = \\Delta E_{k}\\\\ \\therefore \\quad E_{k} &amp;  = \\frac{1}{2}mv^{2} \\end{align}\\]"},{"location":"physics/classic/1-dynamic/work-and-energy/kinetic-energy/#thermal","title":"thermal","text":""},{"location":"physics/classic/1-dynamic/work-and-energy/kinetic-energy/#electrical","title":"electrical","text":""},{"location":"physics/classic/1-dynamic/work-and-energy/kinetic-energy/#em-radiation","title":"em radiation","text":""},{"location":"physics/classic/1-dynamic/work-and-energy/kinetic-energy/thermal/","title":"heat","text":""},{"location":"physics/classic/1-dynamic/work-and-energy/potential-energy/","title":"potential energy","text":"Abstract <ul> <li>conservative forces<ul> <li>work done is independent of path</li> <li>\\(\\mathcal{W} = \\oint F \\cdot ds = 0\\)</li> <li>can be associated with a potential energy function</li> </ul> </li> <li>nonconservative forces<ul> <li>work done depends on path</li> <li>\\(\\mathcal{W} = \\oint F \\cdot ds &gt; 0\\)</li> <li>cannot be associated with a potential energy function</li> </ul> </li> </ul>"},{"location":"physics/classic/1-dynamic/work-and-energy/potential-energy/#force-and-potential-energy","title":"force and potential energy","text":"<ul> <li>one dimensional \\(\\(F(s) = -\\frac{dU_{g}}{ds}\\)\\)</li> <li>three dimensional \\(\\(\\mathbf{F}(s) = -\\nabla U\\)\\)</li> </ul>"},{"location":"physics/classic/1-dynamic/work-and-energy/potential-energy/#gravitational-force-weight","title":"gravitational force (weight)","text":"<p>Tip</p> <ul> <li>gravitational field strength: force per unit mass on a masss placed in a gravitation field</li> </ul> \\[\\begin{align} \\text{Gravitational field strength of a mass}:\\quad g = \\frac{Gm}{r^{2}} \\\\ W_{a} = m_{a}\\left( \\frac{Gm}{r^{2}} \\right) \\end{align}\\] <p>Tip</p> <p>The gravitational force (\\(\\mathcal{W}\\)) on mass(a) in the gravitation field of mass b</p> <p>law of gravitation</p> <ol> <li>Every object in the universe attracts every other object in the universe with a gravitational force.</li> <li>The magnitude of the gravitational force between two objects is\u2026<ol> <li>directly proportional to the product of their masses and</li> <li>inversely proportional to the square of the separation between their centers</li> </ol> </li> </ol> <p></p> <p></p> <p></p> <p>resource: https://physics.info/gravitation/ https://physics.info/orbital-mechanics-1/</p>"},{"location":"physics/classic/1-dynamic/work-and-energy/potential-energy/1-gravitational-field/","title":"gravitation","text":""},{"location":"programming/c/","title":"C programming language","text":""},{"location":"programming/c/#resource","title":"Resource","text":"<ul> <li>C header file manual</li> <li>w3school</li> <li>REPL</li> </ul>"},{"location":"programming/c/1%20basic/1/","title":"compiler","text":"<p>A C compiler is an operating system program that converts C language statements into machine language equivalents. Different C compilers include GCC, Clang, and MSVC.</p>"},{"location":"programming/c/1%20basic/1/#installation","title":"installation","text":"<ul> <li>GCC: Install using package managers like <code>apt</code> on Ubuntu or <code>brew</code> on macOS.</li> <li>Clang: Often comes pre-installed on macOS or can be installed via package managers.</li> <li>MSVC: Available with Visual Studio on Windows.</li> </ul>"},{"location":"programming/c/1%20basic/1/#basic-usage-commands","title":"basic usage commands","text":"<ul> <li>To compile a program: <code>gcc filename.c -o outputname</code></li> <li>To run the compiled program: <code>./outputname</code></li> </ul>"},{"location":"programming/c/1%20basic/1/#compilation-process","title":"compilation process","text":"<ol> <li>Preprocessing: Handles directives like <code>#include</code> and <code>#define</code>.</li> <li>Compilation: Translates the preprocessed code into assembly language.</li> <li>Assembly: Converts assembly code into machine code.</li> <li>Linking: Combines object files into a single executable.</li> </ol>"},{"location":"programming/c/1%20basic/2/","title":"program structure","text":""},{"location":"programming/c/1%20basic/2/#header-files-and-preprocessor-directives","title":"header files and preprocessor directives","text":"<p>Header files contain declarations for functions and macros. Common header files include: - <code>&lt;stdio.h&gt;</code>: Standard input/output functions. - <code>&lt;stdlib.h&gt;</code>: General utility functions.</p>"},{"location":"programming/c/1%20basic/2/#role-of-preprocessor-directives","title":"role of preprocessor directives","text":"<p>Preprocessor directives like <code>#include</code>, <code>#define</code>, and <code>#ifdef</code> are used to include libraries and define constants.</p>"},{"location":"programming/c/1%20basic/2/#main-function","title":"main function","text":"<p>The <code>main()</code> function is the entry point of a C program. It usually returns an integer value, typically 0, to indicate successful execution.</p>"},{"location":"programming/c/1%20basic/2/#whitespace","title":"whitespace","text":"<p>whitespace and indentation are ignore in c due to encapsulation and ending symbol e.g. {} ;</p> <pre><code>// code like this is also valid\nint blockVar = 20; printf(\"Block Variable: %d\\n\", blockVar); //... more code*\n</code></pre>"},{"location":"programming/c/1%20basic/2/#comments","title":"comments","text":"<pre><code>`//` inline comment\n`/* */` block comment\n</code></pre>"},{"location":"programming/c/1%20basic/3/","title":"variable","text":""},{"location":"programming/c/1%20basic/3/#scope","title":"scope","text":"<p><pre><code>//local: define inside func\n\nvoid func() {\n    int x = 5;\n}\n\n// global: define outside all function (like a file scope)\n\nint x = 5;\n\nvoid func2() {\n    &lt;code&gt;\n}\n</code></pre> <pre><code>// local.func.static: retain value between function call\n\nvoid func3() {\n    static int x = 5;\n}\n\n// local.block: we can separate code in blocks\n\n{\n    code // any variable here___\n}\n{\n    code // can't be access from here\n}\n</code></pre></p>"},{"location":"programming/c/1%20basic/3/#constant","title":"constant","text":"<pre><code>// literal: written inline in the code\n\nfloat area = 3.14(/*radius^2*/)\n\n// sybolic: defined separately\n\nconst float PI = 3.14;\n</code></pre>"},{"location":"programming/c/1%20basic/3/#basic-data-type","title":"basic data type","text":"<ul> <li>integer: every type has different amount of memory allocated \\(\\Rightarrow\\) different useable number \\(\\mu = 0\\) for signed integer \\(\\mu = \\frac{max}{2}\\) for unsigned integer <pre><code>`short`: 2B\n`int`: 4B\n`long`: 4B(x86) 8B(x64)\n`long long`: 8B\n</code></pre></li> <li>floating point <pre><code>`float`: 4B 7dp\n`double`: 8B 15dp\n`long double`: 10/16B (depend on compiler and arch) 18dpd\n</code></pre></li> <li>character <pre><code>`char`: single character like 'a'\n</code></pre></li> <li>boolean <pre><code>`_Bool`: 1 or 0\n</code></pre></li> </ul> <p>Tip</p> <p><code>sizeof</code></p>"},{"location":"programming/c/1%20basic/4/","title":"operator","text":""},{"location":"programming/c/1%20basic/4/#relational","title":"relational","text":"<p>Relational operators compare two values. Examples include <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>.</p>"},{"location":"programming/c/1%20basic/4/#arithmetic","title":"arithmetic","text":"<p>Arithmetic operators perform mathematical operations. Examples include <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>++</code>, <code>--</code></p>"},{"location":"programming/c/1%20basic/4/#assignment","title":"assignment","text":"<p>arithmetic (except<code>++</code> and <code>--</code>), and bitwise (except <code>~</code>) can be put before <code>_=</code> e.g. <code>x &amp;= 2</code> \\(\\equiv\\) <code>x = x &amp; 2</code></p>"},{"location":"programming/c/1%20basic/4/#logical","title":"logical","text":"<p>Logical operators combine boolean expressions. Examples include <code>&amp;&amp;</code>, <code>||</code>, <code>!</code></p>"},{"location":"programming/c/1%20basic/4/#bitwise","title":"bitwise","text":"<p>Bitwise operators perform operations on bits. Examples include <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>~</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code></p>"},{"location":"programming/c/1%20basic/4/#operator-precedence-and-associativity","title":"operator precedence and associativity","text":"<p>determine the order of operations in complex expressions.</p>"},{"location":"programming/c/1%20basic/5/","title":"function","text":""},{"location":"programming/c/1%20basic/5/#declaration-and-call","title":"declaration and call","text":"<p>Functions must be declared before they are called. The declaration specifies the function's return type and parameters.</p>"},{"location":"programming/c/1%20basic/5/#prototypes-and-scope","title":"prototypes and scope","text":"<p>Function prototypes provide information about the function to the compiler. Scope determines where a function can be called.</p>"},{"location":"programming/c/1%20basic/5/#standard-io","title":"standard I/O","text":"<p>Standard input/output functions include <code>printf()</code> for output and <code>scanf()</code> for input.</p>"},{"location":"programming/c/1%20basic/5/#string-handling","title":"string handling","text":"<p>Functions for handling strings include <code>strlen()</code>, <code>strcpy()</code>, and <code>strcat()</code>. These are defined in <code>&lt;string.h&gt;</code>.</p>"},{"location":"programming/c/1%20basic/5/#function-pointers","title":"Function pointers","text":"<p>allow for dynamic function calls, enabling callback functions and state machines.</p>"},{"location":"programming/c/1%20basic/5/#recursion","title":"Recursion","text":""},{"location":"programming/c/1%20basic/6/","title":"standard library","text":"<p>Tip</p> <p>C header file explained: CS50</p>"},{"location":"programming/c/1%20basic/6/#stdlibh","title":"<code>&lt;stdlib.h&gt;</code>","text":"<p>Memory allocation functions like <code>malloc()</code>, <code>calloc()</code>.</p>"},{"location":"programming/c/1%20basic/6/#escape-sequence","title":"escape sequence","text":"<pre><code>\\n: Newline\n\\t: Horizontal tab\n\\\": Double quote\n\\\\: Backslash\n\\a: Alert (bell)\n\\b: Backspace\n\\f: Form feed\n\\r: Carriage return\n\\v: Vertical tab\n</code></pre>"},{"location":"programming/c/1%20basic/6/#stringh","title":"<code>&lt;string.h&gt;</code>","text":"<p>String manipulation functions like <code>strcpy()</code>, <code>strlen()</code>.</p>"},{"location":"programming/c/1%20basic/6/#mathh","title":"<code>&lt;math.h&gt;</code>","text":"<p>Mathematical functions like <code>sqrt()</code>, <code>pow()</code>.</p>"},{"location":"programming/c/2%20flow%20control/1/","title":"selection &amp; conditional","text":""},{"location":"programming/c/2%20flow%20control/1/#if-statement","title":"if statement","text":"<pre><code>if(condition) code\nelse if(condition) code\nelse code\n</code></pre> <p>Note</p> <p>inline if statement</p>"},{"location":"programming/c/2%20flow%20control/1/#tenery-operator","title":"tenery operator","text":"<pre><code>condition ? trueDoThis, falseDoThis\n// usage\nassign = condition ? this, otherwisethis;\n</code></pre>"},{"location":"programming/c/2%20flow%20control/1/#switch-statement","title":"switch statement","text":"<pre><code>switch (var) {\n  case number:\n    break;\n  case 'character':\n    break;\n  default:\n    code\n}\n</code></pre> <p>Note</p> <ul> <li>without <code>break</code>, if the condition is match all cases below it will be run</li> <li>case only allow integer value, and a char is an integer through ASCII</li> </ul>"},{"location":"programming/c/2%20flow%20control/1/#usage-of-conditional-and-decision-making-efficiency","title":"usage of conditional and decision making efficiency","text":""},{"location":"programming/c/2%20flow%20control/2/","title":"iteration","text":"<p>Note</p> <p>inline iteration</p>"},{"location":"programming/c/2%20flow%20control/2/#for","title":"for","text":"<pre><code>for (base init; condition; increment) code\n</code></pre>"},{"location":"programming/c/2%20flow%20control/2/#while","title":"while","text":"<pre><code>while (condition) code\n</code></pre>"},{"location":"programming/c/2%20flow%20control/2/#do-while","title":"do while","text":"<pre><code>do code\nwhile (condition)\n</code></pre>"},{"location":"programming/c/2%20flow%20control/3/","title":"break and continue","text":"<ul> <li><code>break</code>: instantly exit the current most inner loop or switch block</li> <li><code>continue</code>: skip the current most inner loop</li> </ul>"},{"location":"programming/c/2%20flow%20control/3/#post-condition-loop-with-infinite-loop","title":"post-condition loop with infinite loop","text":"coderesult <pre><code>int i = 0;\nwhile (1) {\n    i++;\n    if (i == 3) break;\n}\n</code></pre> <p><code>i = 0 -&gt; i = 1 -&gt; i = 2</code></p> <p>at i = 3, the break stops the loop</p>"},{"location":"programming/c/3%20data%20type/1/","title":"array","text":"<p>Note</p> <ul> <li>Homogeneous Elements</li> <li>Contiguous Memory Allocation</li> <li>Zero-Based Indexing</li> </ul>"},{"location":"programming/c/3%20data%20type/1/#declare-init-manipulation","title":"declare, init, manipulation","text":"<p>Arrays are collections of elements of the same type. They can be declared, initialised, and manipulated using indexing. <pre><code>// init\ntype array[size];\n\n// declare and init\ntype array[] = {element, element, ...}; // size is inferred\n\n// accesssing\narray[index] // give element at that index\narray[index] = element // assign and update 1element\n\n// more dimension\ntype matrix[row][col]...;\n</code></pre></p> <p>Why use or !use</p> <ul> <li>Efficient Memory Usage: Arrays provide a way to store multiple values in a single variable, reducing the need for multiple variable declarations.</li> <li>Fast Access: Elements can be accessed quickly using their index, making arrays suitable for algorithms that require frequent data retrieval.</li> <li>Ease of Iteration: Arrays can be easily traversed using loops, allowing for efficient processing of elements.</li> </ul>"},{"location":"programming/c/3%20data%20type/1/#memory-size","title":"memory size","text":"<p>2</p>"},{"location":"programming/c/3%20data%20type/1/#character-string-and-arrays-explain","title":"character string and arrays explain","text":"<p>Character strings are arrays of characters terminated by a null character (<code>'\\0'</code>). They can be manipulated using string functions.</p>"},{"location":"programming/c/3%20data%20type/1/#memory-layout-passing-array","title":"memory layout &amp; passing array","text":"<p>Discuss memory layout of arrays and the implications of passing arrays to functions.</p>"},{"location":"programming/c/3%20data%20type/2/","title":"pointer","text":""},{"location":"programming/c/3%20data%20type/2/#basic-declare","title":"basic, declare","text":"<p>Pointers are variables that store memory addresses. They can be declared using the <code>*</code> operator.</p>"},{"location":"programming/c/3%20data%20type/2/#pointer-arithmetic-and-array","title":"pointer arithmetic and array","text":"<p>Pointer arithmetic allows traversal of arrays using pointers. For example, <code>ptr++</code> moves to the next element.</p>"},{"location":"programming/c/3%20data%20type/2/#dynamic-memory-allocation","title":"dynamic memory allocation","text":"<p>Dynamic memory can be allocated using <code>malloc()</code>, <code>calloc()</code>, and freed using <code>free()</code>.</p>"},{"location":"programming/c/3%20data%20type/2/#pointer-and-function","title":"pointer and function","text":"<p>Pointers can be passed to functions to allow for call-by-reference, enabling modification of the original variable.</p>"},{"location":"programming/c/3%20data%20type/2/#pointer-and-structure","title":"pointer and structure","text":"<p>Pointers can also be used with structures to access structure members dynamically.</p>"},{"location":"programming/c/3%20data%20type/2/#array-of-pointer","title":"array of pointer","text":""},{"location":"programming/c/3%20data%20type/2/#pointer-to-function","title":"pointer to function","text":""},{"location":"programming/c/3%20data%20type/2/#double-pointers","title":"double pointers","text":""},{"location":"programming/c/3%20data%20type/3/","title":"struct","text":""},{"location":"programming/c/3%20data%20type/3/#definition-and-declaration","title":"definition and declaration","text":"<p>Structures are user-defined data types that group related variables. They are defined using the <code>struct</code> keyword.</p>"},{"location":"programming/c/3%20data%20type/3/#member-init-and-access","title":"member, init and access","text":"<p>Members of a structure can be accessed using the dot operator (<code>.</code>). Structures can be initialized at declaration.</p>"},{"location":"programming/c/3%20data%20type/3/#nested-and-array-of-structure","title":"nested and array of structure","text":"<p>Structures can contain other structures (nested) and can be declared as arrays to store multiple instances.</p>"},{"location":"programming/c/3%20data%20type/3/#unions-definition-declaration-and-use","title":"unions: definition declaration and use","text":"<p>Unions are similar to structures but can store different data types in the same memory location.</p>"},{"location":"programming/c/3%20data%20type/3/#bit-field","title":"bit field","text":""},{"location":"programming/c/3%20data%20type/3/#typedef-and-complex-data-types","title":"typedef and complex data types","text":""},{"location":"programming/c/3%20data%20type/4/","title":"cortorsium","text":""},{"location":"programming/c/3%20data%20type/4/#enum-types","title":"enum types","text":"<p>define a variable that can hold a set of predefined constants</p>"},{"location":"programming/c/4%20advance%20programming/concurrency/","title":"concurrency","text":""},{"location":"programming/c/4%20advance%20programming/concurrency/#multi-treading","title":"multi-treading","text":""},{"location":"programming/c/4%20advance%20programming/concurrency/#synchronisation","title":"synchronisation","text":""},{"location":"programming/c/4%20advance%20programming/error/","title":"error handling","text":""},{"location":"programming/c/4%20advance%20programming/error/#file-operation","title":"file operation","text":""},{"location":"programming/c/4%20advance%20programming/file/","title":"file processing","text":""},{"location":"programming/c/4%20advance%20programming/file/#operation","title":"operation","text":"<p>File operations include opening, reading, writing, and closing files using standard I/O functions.</p>"},{"location":"programming/c/4%20advance%20programming/file/#pointer-and-operation","title":"pointer and operation","text":"<p>File pointers are used to navigate through files.</p>"},{"location":"programming/c/4%20advance%20programming/file/#sequential-and-random-access-files","title":"sequential and random access files","text":"<p>Sequential access reads data in order, while random access allows reading data at any position in the file.</p>"},{"location":"programming/c/4%20advance%20programming/file/#working-with-binary","title":"working with binary","text":""},{"location":"programming/c/4%20advance%20programming/file/#error-handling","title":"error handling","text":""},{"location":"programming/c/4%20advance%20programming/ipc/","title":"inter-process communication","text":""},{"location":"programming/c/4%20advance%20programming/ipc/#methods","title":"methods","text":""},{"location":"programming/c/4%20advance%20programming/memory/","title":"memory management","text":""},{"location":"programming/c/4%20advance%20programming/memory/#leak","title":"leak","text":""},{"location":"programming/c/4%20advance%20programming/modular/","title":"modular programming","text":""},{"location":"programming/c/4%20advance%20programming/modular/#function-arguments-and-return-values","title":"Function arguments and return values","text":""},{"location":"programming/c/4%20advance%20programming/modular/#function-prototypes-and-scope","title":"Function prototypes and scope","text":""},{"location":"programming/c/4%20advance%20programming/modular/#recursion-and-recursive-functions","title":"Recursion and recursive functions","text":""},{"location":"programming/c/4%20advance%20programming/tips/","title":"tip","text":""},{"location":"programming/c/4%20advance%20programming/tips/#inline-code","title":"inline code","text":"<p>Tip</p> <p>All iteration fn and <code>if</code> statement will run the <code>next code line</code>, to run multiple lines of code use <code>{}</code> (code block) to wrap.</p>"},{"location":"programming/python/","title":"Python","text":"<p>Note</p> <p>Interpreter read from top to bottom</p>"},{"location":"programming/python/#data-type-in-python","title":"Data type in python","text":"<ul> <li>int: 2, -12</li> <li>float: 2.0, -1.23</li> <li>string: \"hello\"</li> <li>boolean: True, False</li> </ul>"},{"location":"programming/python/#variable","title":"Variable","text":"<p>Note</p> <p>Python use type inference, and therefore can assign without declare</p> <p>convention</p> <ul> <li>Snake case: hello_world</li> <li>Camel case: helloWorld</li> </ul>"},{"location":"programming/python/#cheatsheet","title":"Cheatsheet","text":""},{"location":"programming/python/#common-usage","title":"Common usage","text":"Usage Command User input <code>input('x: ')</code> Assignment <code>x = &lt;data&gt;</code> Multiple Values <code>x,y,z = '1','2','3'</code> Console log <code>print(variables, goes, here)</code> List <code>x=[int, str, bool, any]</code> Length of iteratable object <code>len()</code> Range Function <code>in range(start, stop, step)</code> Slice operator <code>list[start:stop:step] or list[:stop] or list[start:]</code> Set <code>s = set(elements)</code> or <code>s = {1,2,3}</code> only if not empty"},{"location":"programming/python/#operator","title":"Operator","text":"Arithmetic Operator command Addition <code>+</code> Subtraction <code>-</code> Multiplication <code>*</code> Division <code>/</code> Exponential <code>**</code> Floor Division <code>//</code> Mod <code>%</code> <p>Order of operation</p> <p>use pemdas, bedmas, or whatever</p> What if one of the operand is a float? <p>Output will remain the same number of precision of the most precise float.</p> Type conversion command to int <code>int(number)</code> to string <code>str(any not list)</code> to float <code>float(number)</code> what's the type? <code>type(var)</code> to list <code>list(any)</code> <p>Note</p> <p>Maximum accurate decimal point is 13</p> String method command to uppercase <code>str.upper()</code> to lowercase <code>str.lower()</code> Capitalise <code>str.capitalize()</code> Count Occurence <code>str.count(str)</code> Repeat String <code>str * int</code> times Concatenate <code>str + str</code> ASCII value, ord <code>ord(char)</code> what exactly are string data type? <p>It is a class instance, so it has access to parent class method like <code>.upper()</code> and <code>.lower()</code></p> List method command Append <code>list.append(str)</code> Extend <code>list.extend(list)</code> Pop <code>list.pop(index)</code> Element Assignment <code>list[index]=...</code> Duplicate <code>list2 = list[:]</code> <p>Info</p> <p>Tuple is an immutable list -&gt; no append, pop, etc... (x,y,z)</p> Conditional Operator command Equality <code>==</code> Inequality <code>!=</code> Comparison <code>&gt;, &gt;=, &lt;, &lt;=</code> And <code>and</code> Or <code>or</code> Not <code>not</code> conditional statement <code>if ...: elif ...: else:</code> <p>Info</p> <p>Characters can be compared which represent through their ASCII value <code>'a' &gt; 'b'</code> is false</p> Set method command Add <code>set.add(any)</code> Delete <code>set.remove(element)</code> Existent check <code>element in set</code> union, intersection, difference <code>set.union(another set)</code> replace the union method with what's necessary"},{"location":"programming/python/#dictionary","title":"Dictionary","text":"<p><code>dict = {any data key: any value}</code></p> <ul> <li>it is possible to find the <code>key in dict</code> </li> <li>assignment works like on list</li> <li>to get a list of value from a dict `dict.values</li> </ul>"},{"location":"programming/python/#iteration","title":"Iteration","text":""},{"location":"programming/python/#for-loops","title":"For loops","text":"<pre><code>for index in range(start, stop, step):\n    ...\nfor element in [list]:\n    ...\nfor index, element in enumerate(list):\n    ...\n</code></pre>"},{"location":"programming/python/#while-loops","title":"While Loops","text":"<pre><code>index/count = 0\nwhile condition: #usually, the condition is base on max count, or other boolean, run only if TRUE\n    ...\n    index/count += 1\nwhile True:\n    ...\n    i+= 1\n    if exit-condition:\n        break #only break the current loop or the child loop\n</code></pre>"},{"location":"programming/python/#playground","title":"Playground","text":"ResultSource <p>dlrowolleh</p> <pre><code>arr = [1,2,3,'a']\nprint(\"helloworld\"[::-1])\n</code></pre>"}]}